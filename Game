#include <iostream>
#include <windows.h>
#include <string>
#include <iomanip>

using namespace std;

//Function Declarations
void Intro();
void HUD();
int Choices();
int CheckHealth(int water, int energy, int food, int health, int& players_Alive);

//Variable Declarations for name, food, health, energy and water
string name;
int health = 0;
int maxHealth = 0;
int energy = 0;
int maxEnergy = 0;
int water = 0;
int maxWater = 0;
int food = 0;
int maxFood = 0;

//boolean declarations for shelter, fire, weapon and SOS signal
bool shelter = false;
bool fire = false;
bool weapon = false;
bool sos_Signal = false;

//boolean declarations for boat parts
bool boat_Hull = false;
bool boat_Sail = false;
bool boat_Jib = false;

//while players_Alive is equal to 1, game will continue
int players_Alive = 1;

//variable for the players choice, initialized to 0
int playerChoice = 0;

int main() {

	//initialize variables to starting value (100)
	health = 100;
	energy = 100;
	food = 100;
	water = 100;

	const int maxHealth = 100;
	const int maxWater = 100;
	const int maxFood = 100;
	const int maxEnergy = 100;

	//Display the intro to the game
	Intro();
		
	//Loop the HUD, Choices,
	while (players_Alive == 1) {

		HUD();
		Choices();


		switch (playerChoice) {

			//Option one builds shelter
		case 1:
			if (shelter == true) {
				cout << "Shelter already built";
			}
			else {
				cout << "1. Shelter built." << endl << endl;

				//change food, water, and energy levels. *Create constants for stat changes*
				water = water - 50;
				energy = energy - 20;
				food = food - 20;
				shelter = true;
			}
			break;

			//Option two builds fire
		case 2:
			if (fire == true) {
				cout << "Fire already built";
			}
			else {
				cout << "2. Fire built." << endl << endl;

				//change food, water, and energy levels. *Create constants for stat changes*
				water = water - 50;
				energy = energy - 10;
				food = food - 5;
				fire = true;
			}
			break;

			//Option three builds weapon
		case 3:
			if (weapon == true) {
				cout << "Weapon already built";
			}
			else {
				cout << "3. Weapon built." << endl << endl;

				//change food, water, and energy levels. *Create constants for stat changes*
				water = water - 10;
				energy = energy - 10;
				food = food - 5;
				weapon = true;
			}
			break;

			//Option four looks for water
		case 4:
			cout << "Using a stream of fresh water not too far " << endl;
			cout << "from your camp, you are able to rehydrate." << endl << endl;

			//change food, water, and energy levels. *Create constants for stat changes*
			water = water + 50;
			energy = energy - 10;
			food = food - 5;

			//players water level cannot exceed max water level (100)
			if (water > maxWater) {
				water = maxWater;
			}
			break;

			//Option five looks for food
		case 5:
			cout << "Getting hungry, you decide to look for food";

			if (weapon == true && fire == true) {
				cout << "using the spear you made, you go fishing in the shallow waters " << endl;
				cout << "of the sea. Although much harder than anticipated, you eventually " << endl;
				cout << "spear a fishand cook it over the fire." << endl;

				//change food, water, and energy levels.
				food = food + 50;
				energy = energy + 50;
				water = water - 10;
			}
			else {
				cout << "you go foraging on the island for some food. " << endl;
				cout << "After a couple hours, you find some wild " << endl;
				cout << "berries and various insects to hold your hunger over." << endl;

				//change food, water, and energy levels.
				food = food + 25;
				energy = energy + 25;
				water = water - 10;
			}

			//players food and energy levels cannot exceed max level (100)
			if (food > maxFood) {
				food = maxFood;
			}
			if (energy > maxEnergy) {
				energy = maxEnergy;
			}

			break;

			//Option six creates SOS signal
		case 6:
			if (sos_Signal == true) {
				cout << "SOS signal already built.";
			}
			else {
				cout << "SOS signal built.";

				//change food, water, and energy levels. 
				water = water - 20;
				energy = energy - 10;
				food = food - 5;
				sos_Signal = true;
			}
			break;

			//Option seven salvages plane parts
		case 7:
			cout << "7";
			break;

			//Option eight builds boat
		case 8:

			//Building the hull of the boat
			if (boat_Hull == false) {
				cout << "setting boat hull to true" << endl;
				boat_Hull = true;
			}
			//Building the sails of the boat
			else if (boat_Hull == true && boat_Sail == false) {
				cout << "setting boat sails to true" << endl;
				boat_Sail = true;
			}
			//Building the jin of the boat
			else if (boat_Hull == true && boat_Sail == true && boat_Jib == false) {
				cout << "setting boat jib to true" << endl;
				boat_Jib = true;
			}
			//If the boat is fully assembled yet the player selects the build boat option
			else if (boat_Hull == true && boat_Sail == true && boat_Jib == true) {
				cout << "Boat's already assembled. Set sails and escape!";
			}
			break;

			//Option nine escapes island if boat is built
		case 9:
			if (players_Alive == 1 && boat_Hull == true && boat_Sail == true && boat_Jib == true) {
				cout << "Escaped island congrats" << endl << endl;
				players_Alive = 0;
			}
			else if (boat_Hull == false || boat_Sail == false || boat_Jib == false) {
				cout << "Boat is not completed yet, can't sail of island.";
			}
			break;

			//Display invalid choice if the player choice 
			//entered isn't equal to or between 1-9
		default:
			cout << "Invalid choice!";
			break;

		}

		//Checks health of player
		CheckHealth(water, energy, food, health, players_Alive);

		Sleep(3000);
		system("cls");

		//End the game if the player escapes island or doesn't survive
		if (players_Alive == 0) {
			cout << "Game over!" << endl << endl;
		}

	}

		//End the program
		system("pause");
		return 0;
}

//Introduction to the game
void Intro() {

	//input character name
	cout << "Enter character name: \n\n";
	getline(cin, name);

	system("cls");

	//Display the backstory of how the player ended up stranded on the island
	cout << "Your name is " << name;
	cout << "\n\n Backstory: ";

	Sleep(2000);
	system("cls");

}

//Displays the characters stats
void HUD() {

	cout << "Name: " << name << "\t\t Health: " << health << endl;
	cout << "Food: " << food << endl;
	cout << "Energy: " << energy << endl;
	cout << "Water: " << water << endl << endl << endl;

}

//Displays the character's choices and gets input
int Choices() {

		cout << "1. Build shelter" << endl;
		cout << "2. Build fire" << endl;
		cout << "3. Build weapon" << endl;
		cout << "4. Look for water" << endl;
		cout << "5. Look for food" << endl;
		cout << "6. Create SOS signal" << endl;
		cout << "7. Salvage plane parts" << endl;
		cout << "8. Build boat" << endl;
		cout << "9. Escape!" << endl;
		cout << "Enter Choice:	";

		//input player choice, only accepts first integer entered for valid input
		cin >> setw(1) >> playerChoice;

		//invalid input check, making sure input is an integer
		while (!cin.good()) {

			//clear stream
			cin.clear();
			cin.ignore(INT_MAX, '\n');

			//gets input again until correct input is entered
			cout << endl << endl << "Invalid option, pick again: ";
			cin >> setw(1) >>  playerChoice;

		}
	
	cout << endl << endl;

	//clear stream
	cin.clear();
	cin.ignore(INT_MAX, '\n');

	return playerChoice;

}

//Checks the health of the player
int CheckHealth(int water, int energy, int food, int health, int& players_Alive) {

	//checks players health. If health is less than or equal 
	//to zero, players_Alive is set to zero which ends game
	if (health <= 0) {
		cout << "no health, ya dead";
		players_Alive = 0;
		Sleep(10000);
	}

	//checks water levels. If water is less than or equal 
	//to zero, players_Alive is set to zero which ends game
	else if (water <= 0) {
		cout << "no water, ya dead";
		players_Alive = 0;
		Sleep(10000);
	}

	//checks energy levels. If water is less than or equal 
	//to zero, players_Alive is set to zero which ends game
	else if (energy <= 0) {
		cout << "no energy, ya dead";
		players_Alive = 0;
		Sleep(10000);
	}

	//checks food levels. If water is less than or equal 
	//to zero, players_Alive is set to zero which ends game
	else if (food <= 0) {
		cout << "no food, ya dead";
		players_Alive = 0;
		Sleep(10000);
	}

	return players_Alive;

}
